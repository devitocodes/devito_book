!split
===== A method utilizing a staggered mesh =====
label{vib:model2x2:staggered}

idx{staggered mesh}
idx{staggered Euler-Cromer scheme}

 * The Euler-Cromer scheme uses two unsymmetric differences
   in a symmetric way...
 * We can derive the method from a more pedagogical point of view
   where we use a *staggered mesh* and only centered differences

Staggered mesh:

 * $u$ is unknown at mesh points $t_0,t_1,\ldots,t_n,\ldots$
 * $v$ is unknown at mesh points $t_{1/2}, t_{3/2},\ldots, t_{n+1/2},\ldots$
   (between the $u$ points)

!split
===== Centered differences on a staggered mesh =====

!bt
\begin{align}
\lbrack D_t u &= v\rbrack^{n+\half},\\
\lbrack D_t v &= -\omega u\rbrack^{n+1}
\tp
\end{align}
!et
Written out:

!bt
\begin{align}
u^{n+1} &= u^{n} + \Delta t v^{n+\half},
label{vib:model2x2:EulerCromer:ueq1s}\\
v^{n+\frac{3}{2}} &= v^{n+\half} -\Delta t \omega^2u^{n+1}
label{vib:model2x2:EulerCromer:veq1s}
\tp
\end{align}
!et
or shift one time level back (purely of esthetic reasons):

!bt
\begin{align}
u^{n} &= u^{n-1} + \Delta t v^{n-\half},
label{vib:model2x2:EulerCromer:ueq1s2}\\
v^{n+\half} &= v^{n-\half} -\Delta t \omega^2u^{n}
label{vib:model2x2:EulerCromer:veq1s2}
\tp
\end{align}
!et

!split
===== Comparison with the scheme for the 2nd-order ODE =====

 * Can eliminate $v^{n\pm 1/2}$ and get the centered scheme
   for $u''+\omega^2 u = 0$
 * What about the initial conditions? Their equivalent too!

$u(0)=0$ and $u'(0)=v(0)=0$ give $u^0=I$ and

!bt
\[ v(0)\approx \half(v^{-\half} + v^{\half}) = 0,
\quad\Rightarrow\quad v^{-\half} =- v^\half\tp\]
!et
Combined with the scheme on the staggered mesh we get

!bt
\[ u^1 = u^0 - \half\Delta t^2\omega^2 I,\]
!et

!split
===== Implementation of a staggered mesh; integer indices =====

 * How to write $v^{n+\half}$ in the code? `v[i+0.5]` does not work...
 * Need a storage convention:
  * $v^{1+\half}$ $\rightarrow$ `v[n]`
  * $v^{1-\half}$ $\rightarrow$ `v[n-1]`
 * $v^{n+\half} = v^{n-\half} -\Delta t \omega^2u^{n}$ becomes
   `v[n] = v[n-1] - dt*w**2*u[n]`

!bc pycod
def solver(I, w, dt, T):
    # set up variables...

    u[0] = I
    v[0] = 0 - 0.5*dt*w**2*u[0]
    for n in range(1, Nt+1):
        u[n] = u[n-1] + dt*v[n-1]
        v[n] = v[n-1] - dt*w**2*u[n]
    return u, t, v, t_v
!ec

!split
===== Implementation of a staggered mesh; half-integer indices (1) =====

It would be nice to write

!bt
\begin{align*}
u^{n} &= u^{n-1} + \Delta t v^{n-\half},\\
v^{n+\half} &= v^{n-\half} -\Delta t \omega^2u^{n},
\end{align*}
!et
as

!bc pycod
u[n] = u[n-1] + dt*v[n-half]
v[n+half] = v[n-half] - dt*w**2*u[n]
!ec
(Implying that `n+half` is `n` and `n-half` is `n-1`.)

!split
===== Implementation of a staggered mesh; half-integer indices (2) =====

This class ensures that `n+half` is `n` and `n-half` is `n-1`:

!bc pycod
class HalfInt:
    def __radd__(self, other):
        return other

    def __rsub__(self, other):
        return other - 1

half = HalfInt()
!ec

Now

!bc pycod
u[n] = u[n-1] + dt*v[n-half]
v[n+half] = v[n-half] - dt*w**2*u[n]
!ec
is equivalent to

!bc pycod
u[n] = u[n-1] + dt*v[n-1]
v[n] = v[n-1] - dt*w**2*u[n]
!ec
