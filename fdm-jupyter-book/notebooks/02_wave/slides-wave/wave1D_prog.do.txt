!split
======= Implementation =======
label{wave:pde1:impl}
idx{wave equation!1D, implementation}

!split
===== The algorithm =====

 o Compute $u^0_i=I(x_i)$ for $i=0,\ldots,N_x$
 o Compute $u^1_i$ by (ref{wave:pde1:step4:1}) and set $u_i^1=0$
   for the boundary points $i=0$ and $i=N_x$, for $n=1,2,\ldots,N-1$,
 o For each time level $n=1,2,\ldots,N_t-1$
   o apply (ref{wave:pde1:step4}) to find $u^{n+1}_i$ for $i=1,\ldots,N_x-1$
   o set $u^{n+1}_i=0$ for the boundary points $i=0$, $i=N_x$.

!split
===== What do to with the solution? =====

 * Different problem settings demand different actions with the
   computed $u^{n+1}_i$ at each time step
 * Solution: let the solver function make a callback to a
   user function where the user can do whatever is desired with
   the solution
 * Advantage: solver just solves and user uses the solution

!bc pycod
def user_action(u, x, t, n):
    # u[i] at spatial mesh points x[i] at time t[n]
    # plot u
    # or store u
!ec

# #if FORMAT not in ("latex", "pdflatex")
!split
===== Making a solver function =====

@@@CODE src-wave/wave1D/wave1D_u0.py fromto: import numpy@def test_quadratic

# #else
!split
===== Making a solver function (1) =====

We specify $\Delta t$ and $C$, and let the solver function
compute $\Delta x = c\Delta t/C$.

!bc pycod
def solver(I, V, f, c, L, dt, C, T, user_action=None):
    """Solve u_tt=c^2*u_xx + f on (0,L)x(0,T]."""
    Nt = int(round(T/dt))
    t = linspace(0, Nt*dt, Nt+1)   # Mesh points in time
    dx = dt*c/float(C)
    Nx = int(round(L/dx))
    x = linspace(0, L, Nx+1)       # Mesh points in space
    dx = x[1] - x[0]
    C2 = C**2                      # Help variable in the scheme
    if f is None or f == 0 :
        f = lambda x, t: 0
    if V is None or V == 0:
        V = lambda x: 0

    u   = zeros(Nx+1)   # Solution array at new time level
    u_1 = zeros(Nx+1)   # Solution at 1 time level back
    u_2 = zeros(Nx+1)   # Solution at 2 time levels back

    import time;  t0 = time.clock()  # for measuring CPU time

    # Load initial condition into u_1
    for i in range(0,Nx+1):
        u_1[i] = I(x[i])

    if user_action is not None:
        user_action(u_1, x, t, 0)
!ec

!split
===== Making a solver function (2) =====

!bc pycod
def solver(I, V, f, c, L, dt, C, T, user_action=None):
    ...
    # Special formula for first time step
    n = 0
    for i in range(1, Nx):
        u[i] = u_1[i] + dt*V(x[i]) + \
               0.5*C2*(u_1[i-1] - 2*u_1[i] + u_1[i+1]) + \
               0.5*dt**2*f(x[i], t[n])
    u[0] = 0;  u[Nx] = 0

    if user_action is not None:
        user_action(u, x, t, 1)

    # Switch variables before next step
    u_2[:], u_1[:] = u_1, u
!ec

===== Making a solver function (3) =====

!bc pycod
def solver(I, V, f, c, L, Nx, C, T, user_action=None):
    ...
    # Time loop

    for n in range(1, Nt):
        # Update all inner points at time t[n+1]
        for i in range(1, Nx):
            u[i] = - u_2[i] + 2*u_1[i] + \
                     C2*(u_1[i-1] - 2*u_1[i] + u_1[i+1]) + \
                     dt**2*f(x[i], t[n])

        # Insert boundary conditions
        u[0] = 0;  u[Nx] = 0
        if user_action is not None:
            if user_action(u, x, t, n+1):
                break

        # Switch variables before next step
        u_2[:], u_1[:] = u_1, u

    cpu_time = t0 - time.clock()
    return u, x, t, cpu_time
!ec

# #endif
!split
===== Verification: exact quadratic solution =====

idx{unit testing}
idx{nose unit test}
idx{pytest unit test}

Exact solution of the PDE problem *and* the discrete equations:
$\uex (x,t) = x(L-x)(1+{\half}t)$

@@@CODE src-wave/wave1D/wave1D_u0.py fromto: def test_quadratic@def test_constant

!split
===== Visualization: animating $u(x,t)$ =====

Make a `viz` function for animating the curve, with plotting
in a `user_action` function `plot_u`:

@@@CODE src-wave/wave1D/wave1D_u0.py fromto: def viz@def guitar

Note: `plot_u` is function inside function and remembers the
local variables in `viz` (known as a closure).

!split
===== Making movie files =====

 * Store spatial curve in a file, for each time level
 * Name files like `'something_%04d.png' % frame_counter`
 * Combine files to a movie

!bc sys
Terminal> scitools movie encoder=html output_file=movie.html \
          fps=4 frame_*.png  # web page with a player
Terminal> avconv -r 4 -i frame_%04d.png -c:v flv       movie.flv
Terminal> avconv -r 4 -i frame_%04d.png -c:v libtheora movie.ogg
Terminal> avconv -r 4 -i frame_%04d.png -c:v libx264   movie.mp4
Terminal> avconv -r 4 -i frame_%04d.png -c:v libpvx    movie.webm
!ec

!bwarning Important
 * Zero padding (`%04d`) is essential for correct sequence of
   frames in `something_*.png` (Unix alphanumeric sort)
 * Remove old `frame_*.png` files before making a new movie
!ewarning


!split
===== Running a case =====
label{wave:pde1:guitar:data}

 * Vibrations of a guitar string
 * Triangular initial shape (at rest)

!bt
\begin{equation}
I(x) = \left\lbrace
\begin{array}{ll}
ax/x_0, & x < x_0\\
a(L-x)/(L-x_0), & \hbox{otherwise}
\end{array}\right.
label{wave:pde1:guitar:I}
\end{equation}
!et

Appropriate data:

  * $L=75$ cm, $x_0=0.8L$, $a=5$ mm, time frequency $\nu = 440$ Hz

!split
===== Implementation of the case =====

@@@CODE src-wave/wave1D/wave1D_u0.py fromto: def guitar@if __name

Program: "`wave1D_u0.py`": "${src_wave}/wave1D/wave1D_u0.py".

!split
===== Resulting movie for $C=0.8$ =====


# #if FORMAT not in ("pdflatex", "latex")
MOVIE: [mov-wave/guitar_C0.8/movie.ogg, width=800]
# #endif

"Movie of the vibrating string": "${doc_notes}/mov-wave/guitar_C0.8/index.html"

!split
===== The benefits of scaling =====

 * It is difficult to figure out all the physical parameters of a case
 * And it is not necessary because of a powerful: *scaling*

Introduce new $x$, $t$, and $u$ without dimension:

!bt
\[ \bar x = \frac{x}{L},\quad \bar t = \frac{c}{L}t,\quad
\bar u = \frac{u}{a}
\]
!et

Insert this in the PDE (with $f=0$) and dropping bars

!bt
\[ u_{tt} = u_{xx}\]
!et

Initial condition: set $a=1$, $L=1$, and
$x_0\in [0,1]$ in (ref{wave:pde1:guitar:I}).

In the code: set `a=c=L=1`, `x0=0.8`, and there is no need to calculate with
wavelengths and frequencies to estimate $c$!

Just one challenge: determine the period of the waves and an
appropriate end time (see the text for details).

!split
======= Vectorization =======
label{wave:pde1:impl:vec}

idx{vectorization}

 * Problem: Python loops over long arrays are slow
 * One remedy: use vectorized (`numpy`) code instead of explicit loops
 * Other remedies: use Cython, port spatial loops to Fortran or C
 * Speedup: 100-1000 (varies with $N_x$)

Next: vectorized loops

!split
===== Operations on slices of arrays =====

idx{scalar code}
idx{array slices}
idx{slice}

 * Introductory example: compute $d_i = u_{i+1}-u_i$

!bc pycod
n = u.size
for i in range(0, n-1):
    d[i] = u[i+1] - u[i]
!ec

 * Note: all the differences here are independent of each other.
 * Therefore $d = (u_1,u_2,\ldots,u_n) - (u_0,u_1,\ldots,u_{n-1})$
 * In `numpy` code: `u[1:n] - u[0:n-1]` or just `u[1:] - u[:-1]`

FIGURE: [fig-wave/vectorized_diff, width=400 frac=0.5]



!split
===== Test the understanding =====

Newcomers to vectorization are encouraged to choose
a small array `u`, say with five elements,
and simulate with pen and paper
both the loop version and the vectorized version.

!split
===== Vectorization of finite difference schemes (1) =====

Finite difference schemes basically contains differences between array
elements with shifted indices. Consider the updating formula

!bc pycod
for i in range(1, n-1):
    u2[i] = u[i-1] - 2*u[i] + u[i+1]
!ec

The vectorization consists of replacing the loop by arithmetics on
slices of arrays of length `n-2`:

!bc pycod
u2 = u[:-2] - 2*u[1:-1] + u[2:]
u2 = u[0:n-2] - 2*u[1:n-1] + u[2:n]   # alternative
!ec

Note: `u2` gets length `n-2`.

If `u2` is already an array of length `n`, do update on "inner" elements

!bc pycod
u2[1:-1]  = u[:-2] - 2*u[1:-1] + u[2:]
u2[1:n-1] = u[0:n-2] - 2*u[1:n-1] + u[2:n]   # alternative
!ec

!split
===== Vectorization of finite difference schemes (2) =====

Include a function evaluation too:

!bc pycod
def f(x):
    return x**2 + 1

# Scalar version
for i in range(1, n-1):
    u2[i] = u[i-1] - 2*u[i] + u[i+1] + f(x[i])

# Vectorized version
u2[1:-1] = u[:-2] - 2*u[1:-1] + u[2:] + f(x[1:-1])
!ec

!split
===== Vectorized implementation in the solver function =====

Scalar loop:
!bc pycod
for i in range(1, Nx):
    u[i] = 2*u_1[i] - u_2[i] + \
           C2*(u_1[i-1] - 2*u_1[i] + u_1[i+1])
!ec
Vectorized loop:

!bc pycod
u[1:-1] = - u_2[1:-1] + 2*u_1[1:-1] + \
          C2*(u_1[:-2] - 2*u_1[1:-1] + u_1[2:])
!ec
or
!bc pycod
u[1:Nx] = 2*u_1[1:Nx]- u_2[1:Nx] + \
          C2*(u_1[0:Nx-1] - 2*u_1[1:Nx] + u_1[2:Nx+1])
!ec

Program: "`wave1D_u0v.py`": "${src_wave}/wave1D/wave1D_u0v.py"

!split
===== Verification of the vectorized version =====

idx{lambda function (Python)}

@@@CODE src-wave/wave1D/wave1D_u0v.py fromto: def test_quadratic@def guitar

Note:

 * Compact code with lambda functions
 * The scalar $f$ value needs careful coding: return constant array
   if vectorized code, else number

!split
===== Efficiency measurements =====

 * Run `wave1D_u0v.py` for $N_x$ as 50,100,200,400,800
   and measuring the CPU time
 * Observe substantial speed-up: vectorized version is
   about $N_x/5$ times faster

Much bigger improvements for 2D and 3D codes!
