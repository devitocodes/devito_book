%!PS-Adobe-2.0 EPSF-2.0
%%Title: vehicle2.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5c
%%CreationDate: Wed May 18 08:28:59 2011
%%BoundingBox: 0 0 730 337
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 337 moveto 0 0 lineto 730 0 lineto 730 337 lineto closepath clip newpath
-11.5 528.2 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
15.000 slw
n 7020 6300 351 351 0 360 DrawEllipse gs col4 1.00 shd ef gr gs col0 s gr

% Polyline
0 slj
0 slc
135.000 slw
n 7020 4950 m
 7020 5985 l gs col0 s gr 
% Polyline
7.500 slw
n 7020 5940 m 7245 5850 l 6795 5715 l 7245 5580 l 6795 5490 l 7245 5400 l
 6795 5265 l 7245 5175 l 6795 5040 l
 7020 4950 l gs col0 s gr 
% Polyline
n 6525 4500 m 7470 4500 l 7470 4950 l 6525 4950 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 435.00 300.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
gs  clippath
255 3917 m 255 3765 l 195 3765 l 195 3917 l 195 3917 l 225 3797 l 255 3917 l cp
eoclip
n 225 8100 m
 225 3780 l gs col0 s gr gr

% arrowhead
n 255 3917 m 225 3797 l 195 3917 l  col0 s
% Polyline
gs  clippath
11563 8130 m 11715 8130 l 11715 8070 l 11563 8070 l 11563 8070 l 11683 8100 l 11563 8130 l cp
eoclip
n 225 8100 m 11655 8100 l
 11700 8100 l gs col0 s gr gr

% arrowhead
n 11563 8130 m 11683 8100 l 11563 8070 l  col0 s
% Polyline
gs  clippath
7035 7963 m 7035 8115 l 7095 8115 l 7095 7963 l 7095 7963 l 7065 8083 l 7035 7963 l cp
7095 6797 m 7095 6645 l 7035 6645 l 7035 6797 l 7035 6797 l 7065 6677 l 7095 6797 l cp
eoclip
n 7065 6660 m
 7065 8100 l gs col0 s gr gr

% arrowhead
n 7095 6797 m 7065 6677 l 7035 6797 l  col0 s
% arrowhead
n 7035 7963 m 7065 8083 l 7095 7963 l  col0 s
% Polyline
n 9266 3060 m 9274 3060 l gs col0 s gr
% Polyline
2 slj
15.000 slw
n 270 6345 m 272 6346 l 275 6348 l 283 6353 l 294 6359 l 309 6368 l
 330 6381 l 356 6396 l 387 6413 l 423 6434 l 464 6456 l
 508 6481 l 555 6507 l 605 6533 l 656 6560 l 708 6587 l
 760 6613 l 812 6639 l 864 6663 l 914 6686 l 963 6707 l
 1011 6726 l 1057 6744 l 1101 6760 l 1144 6774 l 1186 6786 l
 1226 6796 l 1266 6805 l 1304 6811 l 1341 6816 l 1378 6819 l
 1415 6821 l 1451 6820 l 1487 6818 l 1523 6815 l 1560 6810 l
 1593 6804 l 1627 6797 l 1661 6789 l 1695 6780 l 1730 6770 l
 1765 6759 l 1801 6747 l 1838 6734 l 1876 6721 l 1914 6706 l
 1952 6690 l 1992 6674 l 2032 6657 l 2072 6640 l 2113 6622 l
 2154 6604 l 2196 6585 l 2238 6566 l 2280 6547 l 2323 6528 l
 2365 6509 l 2408 6490 l 2450 6471 l 2492 6453 l 2534 6435 l
 2576 6418 l 2617 6401 l 2658 6385 l 2699 6369 l 2739 6355 l
 2778 6341 l 2817 6328 l 2856 6316 l 2894 6305 l 2931 6295 l
 2968 6286 l 3005 6279 l 3041 6272 l 3077 6267 l 3113 6263 l
 3152 6259 l 3191 6257 l 3231 6257 l 3271 6258 l 3310 6261 l
 3351 6264 l 3391 6269 l 3432 6276 l 3473 6284 l 3514 6292 l
 3555 6302 l 3597 6314 l 3638 6326 l 3680 6339 l 3722 6353 l
 3763 6368 l 3804 6384 l 3845 6401 l 3885 6418 l 3925 6435 l
 3965 6453 l 4003 6472 l 4041 6490 l 4078 6509 l 4114 6527 l
 4149 6546 l 4183 6564 l 4216 6582 l 4248 6600 l 4279 6617 l
 4310 6634 l 4339 6651 l 4367 6667 l 4395 6683 l 4421 6698 l
 4448 6713 l 4483 6732 l 4517 6750 l 4551 6768 l 4583 6785 l
 4616 6801 l 4648 6817 l 4679 6832 l 4710 6846 l 4741 6859 l
 4770 6872 l 4800 6884 l 4828 6895 l 4855 6905 l 4882 6914 l
 4908 6923 l 4932 6931 l 4956 6938 l 4978 6944 l 5000 6949 l
 5020 6954 l 5039 6957 l 5057 6961 l 5075 6963 l 5091 6965 l
 5107 6966 l 5123 6968 l 5144 6968 l 5165 6968 l 5185 6967 l
 5206 6965 l 5226 6963 l 5246 6959 l 5266 6955 l 5285 6951 l
 5305 6945 l 5324 6939 l 5342 6933 l 5361 6926 l 5378 6920 l
 5395 6913 l 5412 6906 l 5428 6899 l 5444 6892 l 5460 6885 l
 5476 6878 l 5493 6871 l 5510 6864 l 5528 6858 l 5547 6851 l
 5567 6845 l 5587 6839 l 5609 6834 l 5630 6830 l 5652 6827 l
 5674 6824 l 5697 6823 l 5719 6822 l 5741 6823 l 5763 6826 l
 5784 6829 l 5806 6834 l 5828 6840 l 5847 6847 l 5868 6855 l
 5888 6864 l 5910 6874 l 5932 6885 l 5955 6897 l 5978 6910 l
 6002 6923 l 6025 6937 l 6049 6950 l 6073 6964 l 6096 6977 l
 6119 6990 l 6141 7002 l 6162 7013 l 6183 7023 l 6202 7032 l
 6221 7039 l 6238 7045 l 6255 7050 l 6273 7054 l 6291 7056 l
 6308 7056 l 6326 7055 l 6343 7052 l 6361 7047 l 6379 7041 l
 6398 7033 l 6417 7024 l 6436 7013 l 6455 7001 l 6475 6989 l
 6495 6975 l 6515 6961 l 6535 6946 l 6556 6931 l 6578 6916 l
 6600 6900 l 6618 6888 l 6636 6875 l 6655 6862 l 6675 6849 l
 6696 6836 l 6719 6822 l 6742 6808 l 6766 6794 l 6790 6780 l
 6816 6766 l 6841 6752 l 6868 6738 l 6894 6725 l 6921 6712 l
 6947 6700 l 6973 6688 l 6999 6678 l 7024 6668 l 7049 6659 l
 7073 6652 l 7096 6645 l 7119 6639 l 7141 6634 l 7163 6630 l
 7184 6627 l 7205 6625 l 7226 6624 l 7247 6624 l 7269 6625 l
 7290 6627 l 7312 6631 l 7334 6635 l 7357 6640 l 7379 6647 l
 7401 6655 l 7424 6663 l 7446 6673 l 7469 6684 l 7491 6696 l
 7513 6708 l 7535 6722 l 7556 6736 l 7577 6750 l 7598 6766 l
 7619 6781 l 7639 6798 l 7659 6815 l 7680 6833 l 7699 6849 l
 7719 6867 l 7739 6886 l 7759 6905 l 7780 6924 l 7802 6945 l
 7824 6966 l 7847 6987 l 7871 7008 l 7895 7030 l 7919 7052 l
 7944 7073 l 7969 7094 l 7994 7115 l 8020 7135 l 8045 7154 l
 8070 7172 l 8094 7189 l 8119 7205 l 8143 7219 l 8167 7232 l
 8190 7244 l 8213 7254 l 8235 7262 l 8258 7269 l 8280 7275 l
 8304 7279 l 8328 7282 l 8353 7283 l 8378 7282 l 8403 7280 l
 8429 7277 l 8456 7273 l 8483 7267 l 8510 7261 l 8537 7253 l
 8565 7245 l 8593 7237 l 8621 7228 l 8648 7219 l 8675 7210 l
 8702 7201 l 8728 7193 l 8754 7185 l 8779 7177 l 8803 7171 l
 8827 7165 l 8850 7161 l 8873 7157 l 8895 7155 l 8919 7154 l
 8944 7154 l 8968 7156 l 8993 7159 l 9018 7163 l 9044 7168 l
 9070 7174 l 9096 7181 l 9122 7189 l 9148 7197 l 9174 7206 l
 9199 7215 l 9225 7225 l 9249 7234 l 9273 7243 l 9297 7252 l
 9319 7260 l 9341 7268 l 9362 7275 l 9382 7281 l 9401 7286 l
 9420 7290 l 9440 7294 l 9461 7296 l 9481 7297 l 9502 7298 l
 9523 7298 l 9544 7296 l 9565 7295 l 9587 7292 l 9609 7289 l
 9631 7286 l 9653 7282 l 9675 7279 l 9697 7275 l 9719 7272 l
 9741 7268 l 9762 7266 l 9784 7263 l 9805 7261 l 9826 7260 l
 9848 7260 l 9867 7260 l 9888 7261 l 9909 7263 l 9931 7264 l
 9954 7266 l 9978 7269 l 10003 7271 l 10029 7274 l 10056 7276 l
 10083 7278 l 10111 7280 l 10139 7281 l 10167 7281 l 10196 7281 l
 10224 7280 l 10253 7278 l 10281 7276 l 10309 7272 l 10336 7267 l
 10363 7261 l 10390 7254 l 10418 7245 l 10439 7237 l 10461 7228 l
 10483 7219 l 10505 7208 l 10528 7196 l 10552 7184 l 10576 7170 l
 10600 7155 l 10626 7140 l 10651 7124 l 10677 7107 l 10703 7089 l
 10730 7070 l 10756 7051 l 10783 7032 l 10809 7013 l 10835 6993 l
 10862 6973 l 10887 6953 l 10913 6934 l 10938 6914 l 10962 6895 l
 10986 6876 l 11010 6858 l 11033 6840 l 11055 6822 l 11078 6805 l
 11100 6788 l 11124 6769 l 11148 6751 l 11172 6734 l 11196 6716 l
 11221 6698 l 11247 6679 l 11274 6660 l 11303 6640 l 11332 6620 l
 11364 6598 l 11397 6575 l 11432 6552 l 11468 6528 l 11505 6503 l
 11541 6479 l 11578 6455 l 11612 6432 l 11644 6411 l 11672 6393 l
 11696 6377 l 11715 6365 l 11729 6356 l 11738 6350 l 11743 6346 l

 11745 6345 l gs col0 s gr 
/Times-Italic ff 285.75 scf sf
360 4050 m
gs 1 -1 sc (y) col0 sh gr
/Times-Italic ff 285.75 scf sf
11340 8370 m
gs 1 -1 sc (x) col0 sh gr
/Times-Italic ff 285.75 scf sf
7155 7515 m
gs 1 -1 sc (h\(x\)) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF
