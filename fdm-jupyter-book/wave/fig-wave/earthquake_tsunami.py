"""
Illustration of a tsunami generated by a subsea earthquake.
"""

from pysketcher import *
from numpy import *

#test_test()

def g(x, g_m, g_s=1, g_0=0, g_a=1):
    return g_0 + g_a*exp(-((x-g_m)/float(g_s))**2)

H_0 = 2  # water depth

# Paramters for the initial surface elevation (arguments to g)
I_m = 0
I_s = 1.5
I_a = 1.6
I_0 = 0

B_a = 1.2
B_m = 6
B_s = 1
B_0 = -H_0

xmin = -4*I_s
m = 1
xmax = B_m + (1 + m)*4*B_s
resolution = 500
x = linspace(xmin, xmax, resolution+1)
ymin = B_0 - H_0
ymax = I_a + 1

drawing_tool.set_coordinate_system(xmin, xmax, ymin, ymax, axis=False)
drawing_tool.set_linecolor('blue')
bottom = Curve(x, g(x, B_m, B_s, B_0, B_a))
surface = Curve(x, g(x, I_m, I_s, I_0, I_a))
bottom_flat = Line((xmin, B_0), (xmax, B_0))

left_boundary = Line((I_m, B_0), (I_m, ymax)).set_linestyle('dotted').set_linecolor('black')

B_m_marker = Distance_wText((I_m, B_0-0.5*H_0), (B_m, B_0-0.5*H_0),
                            '$B_m$', text_spacing=-1./30)
H_0_marker = Distance_wText((B_m + 4*B_s, B_0), (B_m + 4*B_s, B_0 + H_0),
                            '$H_0$')
B_a_marker1 = Distance_wText((B_m - 3*B_s, B_0), (B_m - 3*B_s, B_0 + B_a),
                             '$B_a$')
B_a_marker2 = Line((B_m - 3*B_s, B_0 + B_a), (B_m, B_0 + B_a)).set_linestyle('dotted')
L_marker = Distance_wText((B_m, B_0-0.5*H_0), (xmax, B_0-0.5*H_0),
                            '$4mB_s$', text_spacing=-1./30)
x0 = Text('$x=0$', (0, B_0 -H_0/4.))

xpos = I_m + I_s
curve_ypos = g(xpos, I_m, I_s, I_0, I_a)
xpos2 = xpos + 1.5*I_a
ypos = curve_ypos + 1.5*I_a
Ixy = Text_wArrow('$I(x)$', (xpos2, ypos), (xpos, curve_ypos))
print Ixy
xpos = B_m + 0.5*B_s
curve_ypos = g(xpos, B_m, B_s, B_0, B_a)
xpos2 = B_m - 0.5*B_s
ypos = B_0  #curve_ypos + 1*B_a
Bxy = Text_wArrow('$B(x)$', (xpos2, ypos), (xpos, curve_ypos))
print Bxy

markers = Composition(dict(H_0=H_0_marker,
                           x0=x0, left=left_boundary))
fig1 = Composition(dict(bottom=bottom_flat,
                        surface=surface, markers=markers, Ixy=Ixy))

drawing_tool.erase()
fig1.draw()
drawing_tool.display()
drawing_tool.savefig('earthquake_tsunami_flat')


wave_displacement = 2*I_s
x_R = I_m + wave_displacement
x_L = I_m - wave_displacement
I_R_a = 0.5*I_a
surface_R = Curve(x, g(x, x_R, I_s, I_0, I_R_a)).set_linestyle('solid')
surface_L = Curve(x, g(x, x_L, I_s, I_0, I_R_a)).set_linestyle('solid')
curves = Composition(dict(bottom=bottom_flat,
                          surface_L=surface_L, surface_R=surface_R))
al = (I_0+ 0.5* I_R_a)  # arrow level
arrow_R = Arrow1((x_R+0.5*I_s, al),(x_R+1.5*I_s, al)).set_linecolor('black').set_linewidth(1)
arrow_L = Arrow1((x_L-0.5*I_s, al),(x_L-1.5*I_s, al)).set_linecolor('black').set_linewidth(1)
fig2 = Composition(dict(curves=curves, markers=markers,
                        arrows=Composition(
                            dict(arrow_L=arrow_L, arrow_R=arrow_R))))
drawing_tool.erase()
fig2.draw()
drawing_tool.display()
drawing_tool.savefig('earthquake_tsunami_2waves')

curves = Composition(dict(bottom=bottom, surface=surface))
markers_I = Ixy
markers_B = Composition(dict(B_m=B_m_marker,
                             B_a=Composition(dict(B_a_dist=B_a_marker1,
                                                  B_a_dotted=B_a_marker2)),
                             L=L_marker, Bxy=Bxy))
fig3 = Composition(dict(curves=curves, markers=markers,
                        markers_I=markers_I, markers_B=markers_B))

drawing_tool.erase()
fig3.draw()
drawing_tool.display()
drawing_tool.savefig('earthquake_tsunami_hill')
raw_input()
